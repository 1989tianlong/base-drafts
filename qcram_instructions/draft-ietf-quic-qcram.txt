



QUIC                                                           C. Krasic
Internet-Draft                                               Google, Inc
Intended status: Standards Track                               M. Bishop
Expires: August 31, 2018                             Akamai Technologies
                                                        A. Frindell, Ed.
                                                                Facebook
                                                       February 27, 2018


                 Header Compression for HTTP over QUIC
                      draft-ietf-quic-qcram-latest

Abstract

   This specification defines QCRAM, a compression format for
   efficiently representing HTTP header fields, to be used in HTTP over
   QUIC.  This is a variation of HPACK header compression that seeks to
   reduce head-of-line blocking.

Note to Readers

   Discussion of this draft takes place on the QUIC working group
   mailing list (quic@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/search/?email_list=quic [1].

   Working Group information can be found at https://github.com/quicwg
   [2]; source code and issues list for this draft can be found at
   https://github.com/quicwg/base-drafts/labels/-qcram [3].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 31, 2018.






Krasic, et al.           Expires August 31, 2018                [Page 1]

Internet-Draft                    QCRAM                    February 2018


Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Head-of-Line Blocking in HPACK  . . . . . . . . . . . . .   3
     1.2.  Avoiding Head-of-Line Blocking in HTTP/QUIC . . . . . . .   3
   2.  Wire Format . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.1.  HEADERS Frames on the Control Stream  . . . . . . . . . .   5
       2.1.1.  Insert  . . . . . . . . . . . . . . . . . . . . . . .   5
       2.1.2.  Duplicate . . . . . . . . . . . . . . . . . . . . . .   6
     2.2.  HEADER_ACK Frames . . . . . . . . . . . . . . . . . . . .   6
     2.3.  Request Streams . . . . . . . . . . . . . . . . . . . . .   7
       2.3.1.  Index Encoding  . . . . . . . . . . . . . . . . . . .   7
       2.3.2.  Instructions  . . . . . . . . . . . . . . . . . . . .   9
   3.  Encoding Strategies . . . . . . . . . . . . . . . . . . . . .  10
     3.1.  Reference Tracking  . . . . . . . . . . . . . . . . . . .  10
       3.1.1.  Blocked Eviction  . . . . . . . . . . . . . . . . . .  11
     3.2.  Blocked Decoding  . . . . . . . . . . . . . . . . . . . .  11
     3.3.  Speculative table updates . . . . . . . . . . . . . . . .  12
       3.3.1.  Fixed overhead. . . . . . . . . . . . . . . . . . . .  12
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .  12
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  12
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .  12
     6.2.  Informative References  . . . . . . . . . . . . . . . . .  12
     6.3.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  13
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  13
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  13

1.  Introduction

   The QUIC transport protocol was designed from the outset to support
   HTTP semantics, and its design subsumes many of the features of
   HTTP/2.  QUIC's stream multiplexing comes into some conflict with



Krasic, et al.           Expires August 31, 2018                [Page 2]

Internet-Draft                    QCRAM                    February 2018


   header compression.  A key goal of the design of QUIC is to improve
   stream multiplexing relative to HTTP/2 by eliminating HoL (head of
   line) blocking, which can occur in HTTP/2.  HoL blocking can happen
   because all HTTP/2 streams are multiplexed onto a single TCP
   connection with its in-order semantics.  QUIC can maintain
   independence between streams because it implements core transport
   functionality in a fully stream-aware manner.  However, the HTTP/QUIC
   mapping is still subject to HoL blocking if HPACK is used directly.
   HPACK exploits multiplexing for greater compression, shrinking the
   representation of headers that have appeared earlier on the same
   connection.  In the context of QUIC, this imposes a vulnerability to
   HoL blocking (see Section 1.1).

   QUIC is described in [QUIC-TRANSPORT].  The HTTP/QUIC mapping is
   described in [QUIC-HTTP].  For a full description of HTTP/2, see
   [RFC7540].  The description of HPACK is [RFC7541], with important
   terminology in Section 1.3.

   QCRAM modifies HPACK to allow correctness in the presence of out-of-
   order delivery, with flexibility for implementations to balance
   between resilience against HoL blocking and optimal compression
   ratio.  The design goals are to closely approach the compression
   ratio of HPACK with substantially less head-of-line blocking under
   the same loss conditions.

   QCRAM is intended to be a relatively non-intrusive extension to
   HPACK; an implementation should be easily shared within stacks
   supporting both HTTP/2 over (TLS+)TCP and HTTP/QUIC.

1.1.  Head-of-Line Blocking in HPACK

   HPACK enables several types of header representations, one of which
   also adds the header to a dynamic table of header values.  These
   values are then available for reuse in subsequent header blocks
   simply by referencing the entry number in the table.

   If the packet containing a header is lost, that stream cannot
   complete header processing until the packet is retransmitted.  This
   is unavoidable.  However, other streams which rely on the state
   created by that packet _also_ cannot make progress.  This is the
   problem which QUIC solves in general, but which is reintroduced by
   HPACK when the loss includes a HEADERS frame.

1.2.  Avoiding Head-of-Line Blocking in HTTP/QUIC

   In the example above, the second stream contained a reference to data
   which might not yet have been processed by the recipient.  Such




Krasic, et al.           Expires August 31, 2018                [Page 3]

Internet-Draft                    QCRAM                    February 2018


   references are called "vulnerable," because the loss of a different
   packet can keep the reference from being usable.

   The encoder can choose on a per-header-block basis whether to favor
   higher compression ratio (by permitting vulnerable references) or HoL
   resilience (by avoiding them).  This is signaled by the BLOCKING flag
   in HEADERS and PUSH_PROMISE frames (see [QUIC-HTTP]).

   If a header block contains no vulnerable header fields, BLOCKING MUST
   be 0.  This implies that the header fields are represented either as
   references to dynamic table entries which are known to have been
   received, or as Literal header fields (see Section 6.2 of [RFC7541]).

   If a header block contains any header field which references dynamic
   table state which the peer might not have received yet, the BLOCKING
   flag MUST be set.  If the peer does not yet have the appropriate
   state, such blocks might not be processed on arrival.

   The header block contains a prefix (Section 2.3.1).  This prefix
   contains table offset information that establishes total ordering
   among all headers, regardless of reordering in the transport (see
   Section 2.3.1.1).

   In blocking mode, the prefix additionally identifies the minimum
   state required to process any vulnerable references in the header
   block (see "Depends Index" in Section 2.3.1.1).  The decoder keeps
   track of which entries have been added to its dynamic table.  The
   stream for a header with BLOCKING flag set is considered blocked by
   the decoder and can not be processed until all entries in the range
   "[1, Depends Index]" have been added.  While blocked, header field
   data MUST remain in the blocked stream's flow control window.

2.  Wire Format

   QCRAM instructions occur on three stream types, each of which uses a
   separate instruction space:

   o  Table updates are carried by HEADERS frames on the control stream,
      as defined by [QUIC-HTTP].  Frames on this stream modify the
      dynamic table state without generating output to any particular
      request.

   o  Acknowledgement of header frame processing is carried by
      HEADER_ACK frames, running from decoder to encoder.

   o  Finally, the contents of HEADERS and PUSH_PROMISE frames on
      request streams reference the QPACK table state.




Krasic, et al.           Expires August 31, 2018                [Page 4]

Internet-Draft                    QCRAM                    February 2018


   This section describes the instructions which are possible on each
   stream type.

   In order to ensure table consistency, all modifications of the header
   table occur on the control stream rather than on request streams.
   Request streams contain only indexed and literal header entries.

2.1.  HEADERS Frames on the Control Stream

2.1.1.  Insert

   An addition to the header table starts with the '1' one-bit pattern.
   If the header field name matches the header field name of an entry
   stored in the static table or the dynamic table, the header field
   name can be represented using the index of that entry.  In this case,
   the "S" bit indicates whether the reference is to the static (S=1) or
   dynamic (S=0) table and the index of the entry is represented as an
   integer with an 7-bit prefix (see Section 5.1 of [RFC7541]).  This
   value is always non-zero.

        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 1 | S |    Name Index (6+)    |
      +---+---+-----------------------+
      | H |     Value Length (7+)     |
      +---+---------------------------+
      | Value String (Length octets)  |
      +-------------------------------+

                    Insert Header Field -- Indexed Name

   Otherwise, the header field name is represented as a string literal
   (see Section 5.2 of [RFC7541]).  A value 0 is used in place of the
   table reference, followed by the header field name.

















Krasic, et al.           Expires August 31, 2018                [Page 5]

Internet-Draft                    QCRAM                    February 2018


        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 1 |             0             |
      +---+---------------------------+
      | H |     Name Length (7+)      |
      +---+---------------------------+
      |  Name String (Length octets)  |
      +---+---------------------------+
      | H |     Value Length (7+)     |
      +---+---------------------------+
      | Value String (Length octets)  |
      +-------------------------------+

                      Insert Header Field -- New Name

   Either form of header field name representation is followed by the
   header field value represented as a string literal (see Section 5.2
   of [RFC7541]).

2.1.2.  Duplicate

   An entry currently in the dynamic table can be re-inserted into the
   dynamic table without resending the header.

        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 0 |         Index (7+)        |
      +---+---------------------------+

                            Figure 1: Duplicate

   This is useful to mitigate the eviction of older entries which are
   frequently referenced, both to avoid the need to resend the header
   and to avoid the entry in the table blocking the ability to insert
   new headers.

2.2.  HEADER_ACK Frames

   HEADER_ACK frames on the control stream carry information used to
   ensure consistency of the dynamic table.  Information is sent from
   the QCRAM decoder to the QCRAM encoder; that is, the server informs
   the client about the processing of the client's header blocks, and
   the client informs the server about the processing of the server's
   header blocks.

   Each frame represents a header block which the QCRAM decoder has
   fully processed.  It is used by the peer's QCRAM encoder to determine
   whether subsequent indexed representations that might reference that



Krasic, et al.           Expires August 31, 2018                [Page 6]

Internet-Draft                    QCRAM                    February 2018


   block are vulnerable to head-of-line blocking, and to prevent
   eviction races.

   The frame payload contains contains a variable-length integer (as
   defined in [QUIC-TRANSPORT]) which indicates the stream on which the
   header block was processed.  The same Stream ID can be identified
   multiple times, as multiple header-containing blocks can be sent on a
   single stream in the case of intermediate responses, trailers, pushed
   requests, etc. as well as on the Control Streams.  Since header
   frames on each stream are received and processed in order, this gives
   the encoder precise feedback on which header blocks within a stream
   have been fully processed.

2.3.  Request Streams

   HEADERS and PUSH_PROMISE frames on request and push streams reference
   the dynamic table in a particular state without modifying it, but
   emit the headers for an HTTP request or response.

2.3.1.  Index Encoding

   Header data is prefixed by an integer: "Base Index".  "Base index" is
   the cumulative number of entries added to the dynamic table prior to
   encoding the current block, including any entries already evicted.
   It is encoded as a single 8-bit prefix integer:

       0 1 2 3 4 5 6 7
      +-+-+-+-+-+-+-+-+
      |Base Index (8+)|
      +---------------+

                Figure 2: Absolute indexing (BLOCKING=0x0)

   Section 2.3.1.1 describes the role of "Base Index".

   When the BLOCKING flag is 0x1, a the prefix additionally contains a
   second HPACK integer (8-bit prefix) 'Depends':

       0 1 2 3 4 5 6 7
      +-+-+-+-+-+-+-+-+
      |Base Index (8+)|
      +---------------+
      |Depends    (8+)|
      +---------------+

                Figure 3: Absolute indexing (BLOCKING=0x1)





Krasic, et al.           Expires August 31, 2018                [Page 7]

Internet-Draft                    QCRAM                    February 2018


   Depends is used to identify header dependencies (see Section 1.2).
   The encoder computes a value "Depends Index" which is the largest
   (absolute) index referenced by the following header block.  To help
   keep the prefix smaller, "Depends Index" is converted to a relative
   value: "Depends = Base Index - Depends Index".

2.3.1.1.  Hybrid absolute-relative indexing

   HPACK indexed entries refer to an entry by its current position in
   the dynamic table.  As Figure 1 of [RFC7541] illustrates, newer
   entries have smaller indices, and older entries are evicted first if
   the table is full.  Under this scheme, each insertion to the table
   causes the index of all existing entries to change (implicitly).
   Implicit index updates are acceptable for HTTP/2 because TCP is
   totally ordered, but are problematic in the out-of-order context of
   QUIC.

   QCRAM uses a hybrid absolute-relative indexing approach.

   When the encoder adds a new entry to its header table, it can compute
   an absolute index:

   "entry.absoluteIndex = baseIndex++; "

   Since literals with indexing are only sent on the control stream, the
   decoder can be guaranteed to compute the same absolute index values
   when it adds corresponding entries to its table, just as in HPACK and
   HTTP/2.

   When encoding indexed representations, the following holds for
   (relative) HPACK indices:

   "relative index = baseIndex - entry.absoluteIndex + staticTable.size"

   Header blocks on request and push streams do not modify the dynamic
   table state, so they never change the "baseIndex".  However, since
   ordering between streams is not guaranteed, the value of "baseIndex"
   can not be synchronized implicitly.  Instead then, QCRAM sends
   encoder's "Base Index" explicitly as part of the prefix (see
   Section 2.3.1), so that the decoder can compute the same absolute
   indices that the encoder used:

   "absoluteIndex = prefix.baseIndex + staticTable.size -
   relativeIndex;"

   In this way, even if request or push stream headers are decoded in a
   different order than encoded, the absolute indices will still
   identify the correct table entries.



Krasic, et al.           Expires August 31, 2018                [Page 8]

Internet-Draft                    QCRAM                    February 2018


   It is an error if the HPACK decoder encounters an indexed
   representation that refers to an entry missing from the table, and
   the connection MUST be closed with the
   "HTTP_HPACK_DECOMPRESSION_FAILED" error code.

2.3.2.  Instructions

2.3.2.1.  Indexed Header Field Representation

   An indexed header field representation identifies an entry in either
   the static table or the dynamic table and causes that header field to
   be added to the decoded header list, as described in Section 3.2 of
   [RFC7541].

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 1 | S |      Index (6+)       |
   +---+---------------------------+

                           Indexed Header Field

   An indexed header field starts with the '1' 1-bit pattern, followed
   by the "S" bit indicating whether the reference is into the static
   (S=1) or dynamic (S=0) table.  Finally, the index of the matching
   header field is represented as an integer with a 6-bit prefix (see
   Section 5.1 of [RFC7541]).

   The index value of 0 is not used.  It MUST be treated as a decoding
   error if found in an indexed header field representation.

2.3.2.2.  Literal Header Field Representation

   A literal header field representation starts with the '0' 1-bit
   pattern and causes a header field to be added the decoded header
   list.

   The second bit, 'N', indicates whether an intermediary is permitted
   to add this header to the dynamic header table on subsequent hops.
   When the 'N' bit is set, the encoded header MUST always be encoded
   with this specific literal representation.  In particular, when a
   peer sends a header field that it received represented as a literal
   header field with the 'N' bit set, it MUST use the same
   representation to forward this header field.  This bit is intended
   for protecting header field values that are not to be put at risk by
   compressing them (see Section 7.1 of [RFC7541] for more details).

   If the header field name matches the header field name of an entry
   stored in the static table or the dynamic table, the header field



Krasic, et al.           Expires August 31, 2018                [Page 9]

Internet-Draft                    QCRAM                    February 2018


   name can be represented using the index of that entry.  In this case,
   the "S" bit indicates whether the reference is to the static (S=1) or
   dynamic (S=0) table and the index of the entry is represented as an
   integer with an 5-bit prefix (see Section 5.1 of [RFC7541]).  This
   value is always non-zero.

        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 0 | N | S |  Name Index (5+)  |
      +---+---+-----------------------+
      | H |     Value Length (7+)     |
      +---+---------------------------+
      | Value String (Length octets)  |
      +-------------------------------+

                   Literal Header Field -- Indexed Name

   Otherwise, the header field name is represented as a string literal
   (see Section 5.2 of [RFC7541]).  A value 0 is used in place of the
   6-bit index, followed by the header field name.

        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 0 | N |           0           |
      +---+---+-----------------------+
      | H |     Name Length (7+)      |
      +---+---------------------------+
      |  Name String (Length octets)  |
      +---+---------------------------+
      | H |     Value Length (7+)     |
      +---+---------------------------+
      | Value String (Length octets)  |
      +-------------------------------+

                   Literal Header Field -- Literal Name

   Either form of header field name representation is followed by the
   header field value represented as a string literal (see Section 5.2
   of [RFC7541]).

3.  Encoding Strategies

3.1.  Reference Tracking

   An encoder MUST ensure that an indexed representation is not received
   by the encoder after the referenced entry has already been evicted,
   and might wish to ensure that the decoder will not suffer head-of-
   line blocking when encoding particular references.



Krasic, et al.           Expires August 31, 2018               [Page 10]

Internet-Draft                    QCRAM                    February 2018


   In order to enable this, the encoder MUST track outstanding
   (unacknowledged) header blocks on request streams and MAY track
   outstanding header blocks on the control stream.

   When the encoder receives feedback from the decoder, it dereferences
   table entries that were indexed in the acknowledged header.  To track
   which entries must be dereferenced, it can maintain a map from
   unacknowledged headers to lists of (absolute) indices.  The simplest
   place to store the actual reference count might be the table entries.
   In practice the number of entries in the table with a non-zero
   reference count is likely to stay quite small.  A data structure
   tracking only entries with non-zero reference counts, separate from
   the main header table, could be more space efficient.

3.1.1.  Blocked Eviction

   The encoder MUST NOT permit an entry to be evicted while a reference
   to that entry remains unacknowledged.  If a new header to be inserted
   into the dynamic table would cause the eviction of such an entry, the
   encoder MUST NOT emit the insert instruction until the reference has
   been processed by the decoder and acknowledged.

   The encoder can emit a literal representation for the new header in
   order to avoid encoding delays, and MAY insert the header into the
   table later if desired.

   To ensure that the blocked eviction case is rare, references to the
   oldest entries in the dynamic table SHOULD be avoided.  When one of
   the oldest entries in the table is still actively used for
   references, the encoder SHOULD emit an Indexed-Duplicate
   representation instead (see Section 2.1.2).

3.2.  Blocked Decoding

   For header blocks encoded in non-blocking mode, the encoder needs to
   forego indexed representations that refer to vulnerable entries (see
   Section 1.2).  An implementation could extend the header table entry
   with a boolean to track vulnerability.  However, the number of
   entries in the table that are vulnerable is likely to be small in
   practice, much less than the total number of entries, so a data
   tracking only vulnerable (un-acknowledged) entries, separate from the
   main header table, might be more space efficient.

   To track blocked streams, an ordered map (e.g. multi-map) from
   "Depends Index" values to streams can be used.  Whenever the decoder
   processes a header block on the control stream, it can drain any
   members of the blocked streams map that now have their dependencies
   satisfied.



Krasic, et al.           Expires August 31, 2018               [Page 11]

Internet-Draft                    QCRAM                    February 2018


3.3.  Speculative table updates

   Implementations can _speculatively_ send header frames on the HTTP
   Control Streams which are not needed for any current HTTP request or
   response.  Such headers could be used strategically to improve
   performance.  For instance, the encoder might decide to _refresh_ by
   sending Indexed-Duplicate representations for popular header fields
   (Section 2.3.1), ensuring they have small indices and hence minimal
   size on the wire.

3.3.1.  Fixed overhead.

   HPACK defines overhead as 32 bytes ([RFC7541], Section 4.1).  As
   described above, QCRAM adds some per-connection state, and possibly
   some per-entry state to track acknowledgment status and eviction
   reference count.  A larger value than 32 might be more accurate for
   QCRAM.

4.  Security Considerations

   TBD.

5.  IANA Considerations

   This document registers a new frame type, HEADER_ACK, for HTTP/QUIC.
   This will need to be added to the IANA Considerations of [QUIC-HTTP].

6.  References

6.1.  Normative References

   [QUIC-HTTP]
              Bishop, M., "Hypertext Transfer Protocol (HTTP) over
              QUIC", draft-ietf-quic-http-09 (work in progress), January
              2018.

   [RFC7541]  Peon, R. and H. Ruellan, "HPACK: Header Compression for
              HTTP/2", RFC 7541, DOI 10.17487/RFC7541, May 2015,
              <https://www.rfc-editor.org/info/rfc7541>.

6.2.  Informative References

   [QUIC-TRANSPORT]
              Iyengar, J. and M. Thomson, "QUIC: A UDP-Based Multiplexed
              and Secure Transport", draft-ietf-quic-transport-09 (work
              in progress), January 2018.





Krasic, et al.           Expires August 31, 2018               [Page 12]

Internet-Draft                    QCRAM                    February 2018


   [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <https://www.rfc-editor.org/info/rfc7540>.

6.3.  URIs

   [1] https://mailarchive.ietf.org/arch/search/?email_list=quic

   [2] https://github.com/quicwg

   [3] https://github.com/quicwg/base-drafts/labels/-qcram

Acknowledgments

   This draft draws heavily on the text of [RFC7541].  The indirect
   input of those authors is gratefully acknowledged, as well as ideas
   from:

   o  Ryan Hamilton

   o  Patrick McManus

   o  Kazuho Oku

   o  Biren Roy

   o  Ian Swett

   o  Dmitri Tikhonov

Authors' Addresses

   Charles 'Buck' Krasic
   Google, Inc

   Email: ckrasic@google.com


   Mike Bishop
   Akamai Technologies

   Email: mbishop@evequefou.be








Krasic, et al.           Expires August 31, 2018               [Page 13]

Internet-Draft                    QCRAM                    February 2018


   Alan Frindell (editor)
   Facebook

   Email: afrind@fb.com















































Krasic, et al.           Expires August 31, 2018               [Page 14]





QUIC                                                           C. Krasic
Internet-Draft                                               Google, Inc
Intended status: Standards Track                               M. Bishop
Expires: October 26, 2018                            Akamai Technologies
                                                        A. Frindell, Ed.
                                                                Facebook
                                                          April 24, 2018


              QPACK: Header Compression for HTTP over QUIC
                      draft-ietf-quic-qpack-latest

Abstract

   This specification defines QPACK, a compression format for
   efficiently representing HTTP header fields, to be used in HTTP over
   QUIC.  This is a variation of HPACK header compression that seeks to
   reduce head-of-line blocking.

Note to Readers

   Discussion of this draft takes place on the QUIC working group
   mailing list (quic@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/search/?email_list=quic [1].

   Working Group information can be found at https://github.com/quicwg
   [2]; source code and issues list for this draft can be found at
   https://github.com/quicwg/base-drafts/labels/-qpack [3].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 26, 2018.






Krasic, et al.          Expires October 26, 2018                [Page 1]

Internet-Draft                    QPACK                       April 2018


Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Head-of-Line Blocking in HPACK  . . . . . . . . . . . . .   3
     1.2.  Avoiding Head-of-Line Blocking in HTTP/QUIC . . . . . . .   4
   2.  Wire Format . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Primitives  . . . . . . . . . . . . . . . . . . . . . . .   5
     2.2.  Indexing  . . . . . . . . . . . . . . . . . . . . . . . .   5
     2.3.  HEADERS Frames on the Control Stream  . . . . . . . . . .   6
       2.3.1.  Insert With Name Reference  . . . . . . . . . . . . .   7
       2.3.2.  Insert Without Name Reference . . . . . . . . . . . .   7
       2.3.3.  Duplicate . . . . . . . . . . . . . . . . . . . . . .   8
       2.3.4.  Dynamic Table Size Update . . . . . . . . . . . . . .   8
     2.4.  HEADER_ACK Frames . . . . . . . . . . . . . . . . . . . .   9
     2.5.  Request Streams . . . . . . . . . . . . . . . . . . . . .   9
       2.5.1.  Base Index Encoding . . . . . . . . . . . . . . . . .   9
       2.5.2.  Instructions  . . . . . . . . . . . . . . . . . . . .  10
   3.  Encoding Strategies . . . . . . . . . . . . . . . . . . . . .  12
     3.1.  Reference Tracking  . . . . . . . . . . . . . . . . . . .  12
       3.1.1.  Blocked Eviction  . . . . . . . . . . . . . . . . . .  12
       3.1.2.  Blocked Decoding  . . . . . . . . . . . . . . . . . .  13
     3.2.  Speculative table updates . . . . . . . . . . . . . . . .  13
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .  13
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  13
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .  13
     6.2.  Informative References  . . . . . . . . . . . . . . . . .  14
     6.3.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  14
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  14
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  14






Krasic, et al.          Expires October 26, 2018                [Page 2]

Internet-Draft                    QPACK                       April 2018


1.  Introduction

   The QUIC transport protocol was designed from the outset to support
   HTTP semantics, and its design subsumes many of the features of
   HTTP/2.  QUIC's stream multiplexing comes into some conflict with
   header compression.  A key goal of the design of QUIC is to improve
   stream multiplexing relative to HTTP/2 by eliminating HoL (head of
   line) blocking, which can occur in HTTP/2.  HoL blocking can happen
   because all HTTP/2 streams are multiplexed onto a single TCP
   connection with its in-order semantics.  QUIC can maintain
   independence between streams because it implements core transport
   functionality in a fully stream-aware manner.  However, the HTTP/QUIC
   mapping is still subject to HoL blocking if HPACK is used directly.
   HPACK exploits multiplexing for greater compression, shrinking the
   representation of headers that have appeared earlier on the same
   connection.  In the context of QUIC, this imposes a vulnerability to
   HoL blocking (see Section 1.1).

   QUIC is described in [QUIC-TRANSPORT].  The HTTP/QUIC mapping is
   described in [QUIC-HTTP].  For a full description of HTTP/2, see
   [RFC7540].  The description of HPACK is [RFC7541], with important
   terminology in Section 1.3.

   QPACK modifies HPACK to allow correctness in the presence of out-of-
   order delivery, with flexibility for implementations to balance
   between resilience against HoL blocking and optimal compression
   ratio.  The design goals are to closely approach the compression
   ratio of HPACK with substantially less head-of-line blocking under
   the same loss conditions.

   QPACK is intended to be a relatively non-intrusive extension to
   HPACK; an implementation should be easily shared within stacks
   supporting both HTTP/2 over (TLS+)TCP and HTTP/QUIC.

1.1.  Head-of-Line Blocking in HPACK

   HPACK enables several types of header representations, one of which
   also adds the header to a dynamic table of header values.  These
   values are then available for reuse in subsequent header blocks
   simply by referencing the entry number in the table.

   If the packet containing a header is lost, that stream cannot
   complete header processing until the packet is retransmitted.  This
   is unavoidable.  However, other streams which rely on the state
   created by that packet _also_ cannot make progress.  This is the
   problem which QUIC solves in general, but which is reintroduced by
   HPACK when the loss includes a HEADERS frame.




Krasic, et al.          Expires October 26, 2018                [Page 3]

Internet-Draft                    QPACK                       April 2018


1.2.  Avoiding Head-of-Line Blocking in HTTP/QUIC

   In the example above, the second stream contained a reference to data
   which might not yet have been processed by the recipient.  Such
   references are called "vulnerable," because the loss of a different
   packet can keep the reference from being usable.

   The encoder can choose on a per-header-block basis whether to favor
   higher compression ratio (by permitting vulnerable references) or HoL
   resilience (by avoiding them).

   The header block contains a Base Index (see Section 2.5.1) which is
   used to correctly index entries, regardless of reordering in the
   transport (see Section 2.2).  The stream for a header is considered
   blocked by the decoder and cannot be processed until the greatest
   absolute index in the dynamic table is at least the value of the Base
   Index.  While blocked, header field data MUST remain in the blocked
   stream's flow control window.  When the Base Index is zero, the frame
   contains no references to the dynamic table and can always be
   processed immediately.

2.  Wire Format

   QPACK instructions occur in three locations, each of which uses a
   separate instruction space:

   o  Table updates are carried by HEADERS frames on the control stream,
      as defined by [QUIC-HTTP].  Frames on this stream modify the
      dynamic table state without generating output to any particular
      request.

   o  Acknowledgement of header frame processing is carried by
      HEADER_ACK frames on the control stream, running from decoder to
      encoder.

   o  Finally, the contents of HEADERS and PUSH_PROMISE frames on
      request streams reference the QPACK table state.

   This section describes the instructions which are possible on each
   stream type.

   In order to ensure table consistency and simplify update management,
   all table updates occur on the control stream rather than on request
   streams.  Request streams contain only header blocks, which do not
   modify the state of the table.






Krasic, et al.          Expires October 26, 2018                [Page 4]

Internet-Draft                    QPACK                       April 2018


2.1.  Primitives

   The prefixed integer from Section 5.1 of [RFC7541] is used heavily
   throughout this document.  The string literal, defined by Section 5.2
   of [RFC7541], is used with the following modification.

   HPACK defines string literals to begin on a byte boundary.  They
   begin with a single flag (indicating whether the string is Huffman-
   coded), followed by the Length encoded as a 7-bit prefix integer, and
   finally Length octets of data.

   QPACK permits strings to begin other than on a byte boundary.  An
   "N-bit prefix string literal" begins with the same Huffman flag,
   followed by the length encoded as an (N-1)-bit prefix integer.  The
   remainder of the string literal is unmodified.

   A string literal without a prefix length noted is an 8-bit prefix
   string literal and follows the definitions in [RFC7541] without
   modification.

2.2.  Indexing

   Entries in the QPACK static and dynamic tables are addressed
   separately.

   Entries in the static table have the same indices at all times.  The
   static table is defined in Appendix A of [RFC7541].  Note that
   because HPACK did not use zero-based references, there is no value at
   index zero of the static table.

   Entries are inserted into the dynamic table over time.  Each entry
   possesses both an absolute index which is fixed for the lifetime of
   that entry and a relative index which changes over time based on the
   context of the reference.  The first entry inserted has an absolute
   index of "1"; indices increase sequentially with each insertion.

   On the control stream, a relative index of "0" always refers to the
   most recently inserted value in the dynamic table.  Note that this
   means the entry referenced by a given relative index can change while
   interpreting a HEADERS frame as new entries are inserted.











Krasic, et al.          Expires October 26, 2018                [Page 5]

Internet-Draft                    QPACK                       April 2018


       +---+---------------+-------+
       | n |      ...      | d + 1 |  Absolute Index
       + - +---------------+   -   +
       | 0 |      ...      | n-d-1 |  Relative Index
       +---+---------------+-------+
         ^                     |
         |                     V
   Insertion Point         Dropping Point

   n = count of entries inserted
   d = count of entries dropped

                  Dynamic Table Indexing - Control Stream

   Because frames from request streams can be delivered out of order
   with instructions on the control stream, relative indices are based
   on the Base Index (see Section 2.5.1) included in the HEADERS or
   PUSH_PROMISE frame.  The Base Index is the absolute index of the
   entry which has the relative index of zero when interpreting the
   frame.  The relative indices of entries do not change while
   interpreting headers on a request or push stream.

       +---+-----+-----+-----+-------+
       | n | n-2 | n-3 | ... |  d+1  |  Absolute Index
       +---+-----+  -  +-----+   -   +
                 |  0  | ... | n-d-3 |  Relative Index
                 +-----+-----+-------+
                    ^
                    |
                Base Index

   n = count of entries inserted
   d = count of entries dropped

                  Dynamic Table Indexing - Request Stream

   Entries with an absolute index greater than a frame's Base Index
   cannot be referenced by that frame.  If the decoder encounters a
   reference to an entry which has already been dropped from the table,
   this MUST be treated as a stream error of type
   "HTTP_QPACK_DECOMPRESSION_FAILED".  If this reference occurs on the
   control stream, this MUST be treated as a session error.

2.3.  HEADERS Frames on the Control Stream

   Table updates can add a table entry, possibly using existing entries
   to avoid transmitting redundant information.  The name can be
   transmitted as a reference to an existing entry in the static or the



Krasic, et al.          Expires October 26, 2018                [Page 6]

Internet-Draft                    QPACK                       April 2018


   dynamic table or as a string literal.  For entries which already
   exist in the dynamic table, the full entry can also be used by
   reference, creating a duplicate entry.

2.3.1.  Insert With Name Reference

   An addition to the header table where the header field name matches
   the header field name of an entry stored in the static table or the
   dynamic table starts with the '1' one-bit pattern.  The "S" bit
   indicates whether the reference is to the static (S=1) or dynamic
   (S=0) table.  The header field name is represented using the relative
   index of that entry, which is represented as an integer with a 6-bit
   prefix (see Section 5.1 of [RFC7541]).

   The header name reference is followed by the header field value
   represented as a string literal (see Section 5.2 of [RFC7541]).

        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 1 | S |    Name Index (6+)    |
      +---+---+-----------------------+
      | H |     Value Length (7+)     |
      +---+---------------------------+
      | Value String (Length octets)  |
      +-------------------------------+

                    Insert Header Field -- Indexed Name

2.3.2.  Insert Without Name Reference

   An addition to the header table where both the header field name and
   the header field value are represented as string literals (see
   Section 2.1) starts with the '01' two-bit pattern.

   The name is represented as a 6-bit prefix string literal, while the
   value is represented as an 8-bit prefix string literal.















Krasic, et al.          Expires October 26, 2018                [Page 7]

Internet-Draft                    QPACK                       April 2018


        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 0 | 1 | H | Name Length (5+)  |
      +---+---+---+-------------------+
      |  Name String (Length octets)  |
      +---+---------------------------+
      | H |     Value Length (7+)     |
      +---+---------------------------+
      | Value String (Length octets)  |
      +-------------------------------+

                      Insert Header Field -- New Name

2.3.3.  Duplicate

   Duplication of an existing entry in the dynamic table starts with the
   '000' three-bit pattern.  The absolute index of the existing entry is
   represented as an integer with a 5-bit prefix.

        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 0 | 0 | 0 |    Index (5+)     |
      +---+---+---+-------------------+

                            Figure 1: Duplicate

   The existing entry is re-inserted into the dynamic table without
   resending either the name or the value.  This is useful to mitigate
   the eviction of older entries which are frequently referenced, both
   to avoid the need to resend the header and to avoid the entry in the
   table blocking the ability to insert new headers.

2.3.4.  Dynamic Table Size Update

   An encoder informs the decoder of a change to the size of the dynamic
   table using an instruction which begins with the '001' three-bit
   pattern.  The new maximum table size is represented as an integer
   with a 5-bit prefix (see Section 5.1 of [RFC7541]).

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 0 | 0 | 1 |   Max size (5+)   |
   +---+---+---+-------------------+

                Figure 2: Maximum Dynamic Table Size Change

   The new maximum size MUST be lower than or equal to the limit
   determined by the protocol using QPACK.  A value that exceeds this



Krasic, et al.          Expires October 26, 2018                [Page 8]

Internet-Draft                    QPACK                       April 2018


   limit MUST be treated as a decoding error.  In HTTP/QUIC, this limit
   is the value of the SETTINGS_HEADER_TABLE_SIZE parameter (see
   [QUIC-HTTP]) received from the decoder.

   Reducing the maximum size of the dynamic table can cause entries to
   be evicted (see Section 4.3 of [RFC7541]).  This MUST NOT cause the
   eviction of entries with outstanding references (see Section 3.1).

2.4.  HEADER_ACK Frames

   HEADER_ACK frames on the control stream carry information used to
   ensure consistency of the dynamic table.  Information is sent from
   the QPACK decoder to the QPACK encoder; that is, the server informs
   the client about the processing of the client's header blocks and
   table updates, and the client informs the server about the processing
   of the server's header blocks and table updates.

   Each frame represents a header block or table update which the QPACK
   decoder has fully processed.  It is used by the peer's QPACK encoder
   to determine whether subsequent indexed representations that might
   reference impacted entries are vulnerable to head-of-line blocking,
   and to prevent eviction races.

   The frame payload contains contains a variable-length integer (as
   defined in [QUIC-TRANSPORT]) which indicates the stream on which the
   header block was processed.  The same Stream ID can be identified in
   multiple frames, as multiple header blocks can be sent on a single
   request or push stream.  (Requests can have trailers; responses can
   have intermediate status codes and PUSH_PROMISE frames.)  As the
   control stream carries multiple table updates, the control stream can
   also be identified in multiple frames.

   Since header frames on each stream are received and processed in
   order, this gives the encoder precise feedback on which header blocks
   within a stream have been fully processed.

2.5.  Request Streams

   HEADERS and PUSH_PROMISE frames on request and push streams reference
   the dynamic table in a particular state without modifying it, but
   emit the headers for an HTTP request or response.

2.5.1.  Base Index Encoding

   Header data is prefixed by an 8-bit prefix integer: "Base Index".
   "Base Index" is used to resolve references in the dynamic table as
   described in Section 2.2.




Krasic, et al.          Expires October 26, 2018                [Page 9]

Internet-Draft                    QPACK                       April 2018


     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   |        Base Index (8+)        |
   +-------------------------------+
   |      Compressed Headers     ...
   +-------------------------------+

                          Figure 3: Frame Payload

   Base Index is also used to identify header dependencies (see
   Section 1.2).

2.5.2.  Instructions

2.5.2.1.  Indexed Header Field

   An indexed header field representation identifies an entry in either
   the static table or the dynamic table and causes that header field to
   be added to the decoded header list, as described in Section 3.2 of
   [RFC7541].

     0   1   2   3   4   5   6   7
   +---+---+---+---+---+---+---+---+
   | 1 | S |      Index (6+)       |
   +---+---+-----------------------+

                           Indexed Header Field

   An indexed header field starts with the '1' 1-bit pattern, followed
   by the "S" bit indicating whether the reference is into the static
   (S=1) or dynamic (S=0) table.  Finally, the relative index of the
   matching header field is represented as an integer with a 6-bit
   prefix (see Section 5.1 of [RFC7541]).

2.5.2.2.  Literal Header Field With Name Reference

   A header where the header field name matches the header field name of
   an entry stored in the static table or the dynamic table starts with
   the '00' two-bit pattern.

   The third bit, 'N', indicates whether an intermediary is permitted to
   add this header to the dynamic header table on subsequent hops.  When
   the 'N' bit is set, the encoded header MUST always be encoded with a
   literal representation.  In particular, when a peer sends a header
   field that it received represented as a literal header field with the
   'N' bit set, it MUST use a literal representation to forward this
   header field.  This bit is intended for protecting header field




Krasic, et al.          Expires October 26, 2018               [Page 10]

Internet-Draft                    QPACK                       April 2018


   values that are not to be put at risk by compressing them (see
   Section 7.1 of [RFC7541] for more details).

   The header field name is represented using the relative index of that
   entry, which is represented as an integer with a 4-bit prefix (see
   Section 5.1 of [RFC7541]).  The "S" bit indicates whether the
   reference is to the static (S=1) or dynamic (S=0) table.

        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 0 | 0 | N | S |Name Index (4+)|
      +---+---+-----------------------+
      | H |     Value Length (7+)     |
      +---+---------------------------+
      | Value String (Length octets)  |
      +-------------------------------+

                 Literal Header Field With Name Reference

2.5.2.3.  Literal Header Field Without Name Reference

   An addition to the header table where both the header field name and
   the header field value are represented as string literals (see
   Section 2.1) starts with the '01' two-bit pattern.

   The third bit, 'N', indicates whether an intermediary is permitted to
   add this header to the dynamic header table on subsequent hops.  When
   the 'N' bit is set, the encoded header MUST always be encoded with a
   literal representation.  In particular, when a peer sends a header
   field that it received represented as a literal header field with the
   'N' bit set, it MUST use a literal representation to forward this
   header field.  This bit is intended for protecting header field
   values that are not to be put at risk by compressing them (see
   Section 7.1 of [RFC7541] for more details).

   The name is represented as a 5-bit prefix string literal, while the
   value is represented as an 8-bit prefix string literal.














Krasic, et al.          Expires October 26, 2018               [Page 11]

Internet-Draft                    QPACK                       April 2018


        0   1   2   3   4   5   6   7
      +---+---+---+---+---+---+---+---+
      | 0 | 1 | N | H |Name Length(4+)|
      +---+---+---+-------------------+
      |  Name String (Length octets)  |
      +---+---------------------------+
      | H |     Value Length (7+)     |
      +---+---------------------------+
      | Value String (Length octets)  |
      +-------------------------------+

                Literal Header Field Without Name Reference

3.  Encoding Strategies

   Due to out-of-order arrival, QPACK's eviction algorithm requires
   changes (relative to HPACK) to avoid the possibility that an indexed
   representation is decoded after the referenced entry has already been
   evicted.  QPACK employs a two-phase eviction algorithm, in which the
   encoder will not evict entries that have outstanding (unacknowledged)
   references.

3.1.  Reference Tracking

   An encoder MUST ensure that a header block which references a dynamic
   table entry is not received by the decoder after the referenced entry
   has already been evicted, and MUST ensure that the decoder will not
   suffer head-of-line blocking if the decoder has not opted to receive
   blocking references.  Even if the decoder is willing to process
   blocking references, the encoder might choose to avoid them in
   certain cases.

   In order to enable this, the encoder will need to track outstanding
   (unacknowledged) header blocks and table updates using feedback
   received from the decoder.

3.1.1.  Blocked Eviction

   The encoder MUST NOT permit an entry to be evicted while a reference
   to that entry remains unacknowledged.  If a new header to be inserted
   into the dynamic table would cause the eviction of such an entry, the
   encoder MUST NOT emit the insert instruction until the reference has
   been processed by the decoder and acknowledged.

   The encoder can emit a literal representation for the new header in
   order to avoid encoding delays, and MAY insert the header into the
   table later if desired.




Krasic, et al.          Expires October 26, 2018               [Page 12]

Internet-Draft                    QPACK                       April 2018


   To ensure that the blocked eviction case is rare, references to the
   oldest entries in the dynamic table SHOULD be avoided.  When one of
   the oldest entries in the table is still actively used for
   references, the encoder SHOULD emit an Indexed-Duplicate
   representation instead (see Section 2.3.3).

3.1.2.  Blocked Decoding

   For header blocks encoded in non-blocking mode, the encoder needs to
   forego indexed representations that refer to table updates which have
   not yet been acknowledged with Section 2.4.

   To track blocked streams, the necessary Base Index value for each
   stream can be used.  Whenever the decoder processes a table update,
   it can begin decoding any blocked streams that now have their
   dependencies satisfied.

3.2.  Speculative table updates

   Implementations can _speculatively_ send header frames on the HTTP
   Control Streams which are not needed for any current HTTP request or
   response.  Such headers could be used strategically to improve
   performance.  For instance, the encoder might decide to _refresh_ by
   sending Indexed-Duplicate representations for popular header fields
   (Section 2.3.3), ensuring they have small indices and hence minimal
   size on the wire.

4.  Security Considerations

   TBD.

5.  IANA Considerations

   None.

6.  References

6.1.  Normative References

   [QUIC-HTTP]
              Bishop, M., "Hypertext Transfer Protocol (HTTP) over
              QUIC", draft-ietf-quic-http-11 (work in progress), April
              2018.

   [RFC7541]  Peon, R. and H. Ruellan, "HPACK: Header Compression for
              HTTP/2", RFC 7541, DOI 10.17487/RFC7541, May 2015,
              <https://www.rfc-editor.org/info/rfc7541>.




Krasic, et al.          Expires October 26, 2018               [Page 13]

Internet-Draft                    QPACK                       April 2018


6.2.  Informative References

   [QUIC-TRANSPORT]
              Iyengar, J. and M. Thomson, "QUIC: A UDP-Based Multiplexed
              and Secure Transport", draft-ietf-quic-transport-11 (work
              in progress), April 2018.

   [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <https://www.rfc-editor.org/info/rfc7540>.

6.3.  URIs

   [1] https://mailarchive.ietf.org/arch/search/?email_list=quic

   [2] https://github.com/quicwg

   [3] https://github.com/quicwg/base-drafts/labels/-qpack

Acknowledgments

   This draft draws heavily on the text of [RFC7541].  The indirect
   input of those authors is gratefully acknowledged, as well as ideas
   from:

   o  Ryan Hamilton

   o  Patrick McManus

   o  Kazuho Oku

   o  Biren Roy

   o  Ian Swett

   o  Dmitri Tikhonov

Authors' Addresses

   Charles 'Buck' Krasic
   Google, Inc

   Email: ckrasic@google.com







Krasic, et al.          Expires October 26, 2018               [Page 14]

Internet-Draft                    QPACK                       April 2018


   Mike Bishop
   Akamai Technologies

   Email: mbishop@evequefou.be


   Alan Frindell (editor)
   Facebook

   Email: afrind@fb.com









































Krasic, et al.          Expires October 26, 2018               [Page 15]
